<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>郑江龙 Blog</title>
    <description>郑江龙的技术私房菜 | 郑江龙，Web &amp; Java，linux | 这里是 @入镜繁华 的个人博客，与你一起发现更大的世界。</description>
    <link>http://jaylonZheng.github.io/</link>
    <atom:link href="http://jaylonZheng.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 23 Oct 2015 00:34:39 +0800</pubDate>
    <lastBuildDate>Fri, 23 Oct 2015 00:34:39 +0800</lastBuildDate>
    <generator>Jekyll v1.4.2</generator>
    
      <item>
        <title>pring WeB Flow　实战</title>
        <description>&lt;p&gt;sd dfasdf&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Oct 2015 20:31:00 -0000</pubDate>
        <link>http://jaylonZheng.github.io/spring/spring-web-flow-action.html</link>
        <guid isPermaLink="true">http://jaylonZheng.github.io/spring/spring-web-flow-action.html</guid>
        
        <category>Spring</category>
        
        <category>Java</category>
        
        
        <category>spring</category>
        
      </item>
    
      <item>
        <title>Spring WeB Flow初识</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;本博文主要讲如何Spring WeB Flow的原理以及如何使用&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;1背景介绍&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;1.1背景&lt;/h3&gt;
&lt;p&gt;平时中我们尝具有一些流程化的操作，如上网购物时，一般时选中物品–&amp;gt;加入购物车–&amp;gt;提交订单–&amp;gt;付款．在spring里就专门为这种流程化操作提供一个Web框架,Spring  Web Flow，它时Spring的一个子项目，并不属于Spring的一部分. Spring Web Flow能够很好的将流程的定义，实现流程的行为及视图分开，进行解耦．而strust２的流程定义很难做到流程定义和实现行为分开，而且其流程定义的比较散散乱，一般时将流程定义在实现中，即在action内部通过判断条件进行流程跳转．strust２的流程流程可读性差．&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;1.2原理介绍&lt;/h3&gt;

&lt;p&gt;需要声明的是Spring  Web Flow　的构建时基于SpringMVC之上的，所以所有的流程都是由SpringMVC的DispatcherServlet负责管理和转发．但DispatcherServlet并不能直接知道流程请求和流程行为的对应关系，和bean使用一样，流程需要定义，加载，注册和执行．Spring Web Flow的工作是通过&lt;strong&gt;配置流程注册表&lt;/strong&gt;将应用中定义的流程进行加载并注册，当用户进入一个流程时,通过装配了流程注册表引用的FlowHanderMapping查找用户请求URL的对应流程，再通过FlowHandlerAdapter相应该流程请求．FlowHandlerAdapter配置了一个流程执行器，可以执行流程请求．&lt;/p&gt;

&lt;p&gt;上面说的流程是处理一个事情的步骤，&lt;strong&gt;流程由三个主要元定义的：状态，转移和流程数据．&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;状态&lt;/strong&gt;：流程中事件发生的地点．&lt;br /&gt;
&lt;strong&gt;转移&lt;/strong&gt;：连接状态的线，从一个状态转到另一个状态．&lt;br /&gt;
&lt;strong&gt;数据&lt;/strong&gt;：流程在执行和转移时携带的数据．&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;2.相关概念及配置&lt;/h2&gt;

&lt;p&gt;接下来我们进行一些配置，包括jar,注册表配置，执行器配置，处理请求配置等．&lt;/p&gt;

&lt;h3 id=&quot;spring-web-flow&quot;&gt;2.1.Spring Web Flow的相关包&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;org.springframe.binding-x.x.x.RELEASE.jar&lt;br /&gt;
org.springframe.faces-x.x.x.RELEASE.jar&lt;br /&gt;
org.springframe.js-x.x.x.RELEASE.jar&lt;br /&gt;
org.springframe.js.resources-x.x.x.RELEASE.jar&lt;br /&gt;
org.springframe.webflow-x.x.x.RELEASE.jar&lt;br /&gt;
在本例中质押binding和webflow&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-4&quot;&gt;2.2配置流程注册表&lt;/h3&gt;
&lt;p&gt;注册表的主要工作时负责流程的定义查找，加载和注册，&lt;strong&gt;不负责创建和执行&lt;/strong&gt;．注册好的流程提供给执行器，是执行器能够查找并使用这些流程．&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;flow:flow-registry id=&quot;flowRegistry&quot; base-path=&quot;/WEB-INF/flows&quot;&amp;gt;
　　　　&amp;lt;flow:flow-location-pattern value=&quot;*-flow.xml&quot; /&amp;gt;
&amp;lt;flow:flow-registry&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里定义了流程注册表flowRegistry，指定了流程定义的文件位置在/WEB-INF/flows下，并且文件名字以-flow.xml.注册表将匹配的所有文件加载，并注册这些流程．&lt;br /&gt;
 当然也可以通过flow-location-pattern指定文件名字来加载,还可以为该流程设置具体的ID．&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;2.3织入流程执行器&lt;/h3&gt;
&lt;p&gt;主要负责驱动流程的执行．当用户进入一个流程时，流程执行器就会为用户创建并启动一个流程．&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;flow:flow executor id=&quot;flowExecutor&quot; flow-refistry=&quot;flowRegistry&quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-6&quot;&gt;2.4 处理流程请求&lt;/h3&gt;
&lt;p&gt;配置FlowHandlerMapping&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;bean class=&quot;org.springframework.webflow.mvc.servlet.FlowHandlerMapping&quot;&amp;gt;
	&amp;lt;property name=&quot;flowRegistry&quot; ref=&quot;flowRegistry&quot; /&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;配置FlowHandlerAdapter&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;bean class=&quot;org.springframework.webflow.mvc.servlet.FlowHandlerAdapter&quot;&amp;gt;
 	&amp;lt;property name=&quot;flowExecutor&quot; ref=&quot;flowExecutor&quot; /&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-7&quot;&gt;2.5 流程组件&lt;/h3&gt;

&lt;h4 id=&quot;section-8&quot;&gt;2.5.1 状态&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;状态包括是行为(action),决策(decision),结束(end),子流程(subflow)或视图(view)类型．&lt;/strong&gt;&lt;br /&gt;
  1)视图(view)：为用户展现信息，支持任意视图类型．&lt;br /&gt;
有３种写法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  1. &amp;lt; view-state id=&quot;welcome&quot;/&amp;gt;  id对应流程内标状态和试图名称
  2. &amp;lt; view-state id=&quot;welcome&quot; view=&quot;greeting&quot;/&amp;gt;　
  3. &amp;lt; view-state id=&quot;takePlayment&quot; model=&quot;flowScope.paymentDetails&quot;&amp;gt; 绑定流程范围的paymentDetails对像
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2)行为状态&lt;br /&gt;
行为状态是应用程序自身执行的任务，可以理解为方法调用，根据调用结果转移状态．&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;action-state id=&quot;saveOrder&quot; 
	&amp;lt;evaluate expression=&quot;pizzaFlowActions.saveOrder(order)&quot;/&amp;gt;
&amp;lt;/action-state&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pizzaFlowActions是指某个bean ID&lt;br /&gt;
  3)决策状态&lt;br /&gt;
通过条件判断决定转移．&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;decision-state id=&quot;checkDeliverArea&quot; &amp;gt;
	&amp;lt;if test=&quot;pizzaFlowActions.checkDeliveryArea(customer.zipCode)&quot;
	then=&quot;addCustomer&quot;
	else=&quot;deliveryWarning&quot; /&amp;gt;
&amp;lt;/decision-state&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4)子流程状态&lt;br /&gt;
运行一个正在执行的流程调用另一个流程．类似于一个方法调用另一个方法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;subflow-state id=&quot;order&quot; subflow=&quot;pizaa/order&quot;
    &amp;lt;input name=&quot;order&quot; value=&quot;order&quot; /&amp;gt;
    &amp;lt;transition on=&quot;orderCreated&quot; to=&quot;payment&quot;&amp;gt;
&amp;lt;/subflow-state&amp;gt;
＂&amp;lt; input &amp;gt;＂ 是作为子流程的输入．
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;５)结束状态&lt;br /&gt;
	&lt;end-state id=&quot;customerReady&quot;&gt;&lt;/end-state&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-9&quot;&gt;2.5.2转移&lt;/h4&gt;
&lt;p&gt;局部转移，在某个状态下适用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt; transition to=&quot;&quot;&amp;gt;:从当前状态转移到to对应的状态
&amp;lt; transition on=&quot;&quot; to=&quot;&quot;&amp;gt; ：如果触发了on对应的事件，则跳到to事件
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;全局转移，所有状态都可以&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt; global-transitions&amp;gt;
     &amp;lt; transition on=&quot;&quot; to=&quot;&quot; /&amp;gt;
&amp;lt; /global-transitions&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-10&quot;&gt;2.5.3数据&lt;/h4&gt;
&lt;p&gt;１.声明变量包含3种&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt; var name=&quot;&quot; class=&quot;&quot;&amp;gt;
&amp;lt; evaluate result=&quot;&quot; expression=&quot;&quot;&amp;gt;　expression中可以用ＳpEL．
&amp;lt;set name=&quot;&quot; value=&quot; &quot;  &amp;gt;value可以用ＳpEL．
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;２．作用域&lt;br /&gt;
- Conversation:最高层级的流程开始创建时创建，在最高层级的流程结束时销毁．最高层级流程与其子进程共享&lt;br /&gt;
- Flow: 流程&lt;strong&gt;开始创建&lt;/strong&gt;时创建，在流程销毁时销毁．&lt;br /&gt;
- Request:当请求&lt;strong&gt;进入&lt;/strong&gt;流程时创建，在流程返回时销毁&lt;br /&gt;
- Flash：当流程&lt;strong&gt;开始创建&lt;/strong&gt;时创建，在流程销毁时销毁．在视图状态渲染后它也会销毁．&lt;br /&gt;
- View:进入&lt;strong&gt;视图&lt;/strong&gt;状态时创建，退出这个状态时销毁．&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;var 始终时流程作用域&lt;br /&gt;
set 和 evaluate通过name 和result属性前缀指定作用域&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-11&quot;&gt;小结&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Spring Web Flow主要用于流程编程，实现了流程定义，流程行为和视图解耦．&lt;/li&gt;
  &lt;li&gt;Spring　Web　Flow在springMVC基础上创立． 需要DisptacherFilter分配&lt;/li&gt;
  &lt;li&gt;整个流程是流程注册表查找，加载和注册流程定义．FlowHandlerMapping根据用户请求查找URL对应流程，并使用FlowHandlerAdapter执行．&lt;/li&gt;
  &lt;li&gt;流程由三个主要元定义的：状态，转移和流程数据．&lt;/li&gt;
  &lt;li&gt;状态包括是行为(action),决策(decision),结束(end),子流程(subflow)或视图(view)类型&lt;/li&gt;
  &lt;li&gt;转移分为局部和全局，共三种配置方法&lt;/li&gt;
  &lt;li&gt;数据作用域有５种:Flow,Conversation,Ｒequest,Flash,View&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 22 Oct 2015 20:31:00 -0000</pubDate>
        <link>http://jaylonZheng.github.io/spring/spring-web-flow.html</link>
        <guid isPermaLink="true">http://jaylonZheng.github.io/spring/spring-web-flow.html</guid>
        
        <category>Spring</category>
        
        <category>Java</category>
        
        
        <category>spring</category>
        
      </item>
    
  </channel>
</rss>
